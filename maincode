import cv2 
import numpy as np 
import pandas as pd 
 
# Load YOLO 
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
classes = []
with open("coco.names", "r") as f: 
    classes = [line.strip() for line in f.readlines()] 
layer_names = net.getLayerNames() 
output_layers = [layer_names[i[0] - 1] 
for i in net.getUnconnectedOutLayers()] 
  colors = np.random.uniform(0, 255, size=(len(classes), 3)) 
 
# Load colors dataset 
 
index = ["color", "color_name", "hex", "R", "G", "B"] 
csv = pd.read_csv('colors.csv', names=index, header=None) 
 
def getColorName(R, G, B): 
    minimum = 10000     
    for i in range(len(csv)): 
        d = abs(R - int(csv.loc[i, "R"])) + abs(G - int(csv.loc[i, "G"])) + abs(B - int(csv.loc[i, "B"]))   
        if (d <= minimum):       
          minimum = d            
          cname = csv.loc[i, "color_name"]   
    return cname 
 
def draw_function(event, x, y, flags, param):     
  if event == cv2.EVENT_LBUTTONDBLCLK: 
        global b, g, r, xpos, ypos, clicked        
        clicked = True       
        xpos = x       
        ypos = y       
        b, g, r = img[y, x]    
        b = int(b)        
        g = int(g)       
        r = int(r) 
         
# Loading image/ video 
 
clicked = False
r = g = b = xpos = ypos = 0 
cap = cv2.VideoCapture(0) 
 
# Detecting objects 
 
while(True): 
    ret,img = cap.read()    
    height, width, channels = img.shape    
    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False) 
    net.setInput(blob) 
    outs = net.forward(output_layers) 
 
# Showing information on the screen 
 
    class_ids = [] 
    confidences = []  
    boxes = []   
    for out in outs:       
      for detection in out:          
        scores = detection[5:]           
        class_id = np.argmax(scores)       
        confidence = scores[class_id]        
          if confidence > 0.5:            
            # Object detected               
            center_x = int(detection[0] * width)    
            center_y = int(detection[1] * height)     
            w = int(detection[2] * width)              
            h = int(detection[3] * height) 
 
            # Rectangle coordinates         
            x = int(center_x - w / 2)         
            y = int(center_y - h / 2) 
            boxes.append([x, y, w, h])         
            confidences.append(float(confidence))     
            class_ids.append(class_id) 
 
    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)     
    print(indexes) 
    font = cv2.FONT_HERSHEY_PLAIN     
    for i in range(len(boxes)):         
      if i in indexes:             
        x, y, w, h = boxes[i]            
        print(x,y,i)             
        label = str(classes[class_ids[i]]) + str(i)             
        color = colors[i] 
        cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)             
        cv2.putText(img, label, (x, y + 30), font, 3, color, 3) 
 
    cv2.namedWindow('image')     
    cv2.setMouseCallback('image', draw_function) 
     
    if (clicked): 
 
        cv2.rectangle(img, (20, 20), (750, 60), (b, g, r), -1) 
 
        # Creating text string to display (Color name and RGB values)        
        text = getColorName(r, g, b) + ' R=' + str(r) + ' G=' + str(g) + ' B=' + str(b) 
 
        # cv2.putText(img,text,start,font(0-7),fontScale,color,thickness,lineType )        
        cv2.putText(img, text, (50, 50), 2, 0.8, (255, 255, 255), 2, cv2.LINE_AA) 
 
        # For very light colours we will display text in black colour         
        if (r + g + b >= 600): 
            cv2.putText(img, text, (50, 50), 2, 0.8, (0, 0, 0), 2, cv2.LINE_AA) 
 
        clicked = False    
    cv2.imshow('image', img)     
    if cv2.waitKey(1) & 0xFF == ord('q'):   
      break 
 
cap.release() 
cv2.destroyAllWindows() 
